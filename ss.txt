def encrypt(text,shift):
    result=""
    for char in text:
     
      if char.isalpha():
         shift_amount=65 if char.isupper() else 97
         result += chr((ord(char) +shift -shift_amount) % 26 + shift_amount)
      else:
         result+=char
    return result
    
def decrypt(text, shift):
    return encrypt(text, -shift)
    
text="Hello World"
shift=3
encrypted_message=encrypt(text,shift)
print("Encrypted:", encrypted_message)
decrypted_message=decrypt(encrypted_message,shift)
print("Decrypted:", decrypted_message)
==============
def generate_key_matrix(key):
    alphabet = "abcdefghiklmnopqrstuvwxyz"  
    key = "".join(dict.fromkeys(key + alphabet)) 
    return [list(key[i:i + 5]) for i in range(0, 25, 5)]

def prepare_text(text):
    text = text.lower().replace(" ", "").replace("j", "i")
    pairs = []
    i = 0
    while i < len(text):
        if i + 1 < len(text) and text[i] != text[i + 1]:
            pairs.append(text[i:i + 2])
            i += 2
        else:
            pairs.append(text[i] + "x")
            i += 1
    return pairs

def locate(matrix, char):
    for i, row in enumerate(matrix):
        if char in row:
            return i, row.index(char)

def process_pair(matrix, pair, mode="encrypt"):
    r1, c1 = locate(matrix, pair[0])
    r2, c2 = locate(matrix, pair[1])
    
    if r1 == r2:  # Same row
        shift = 1 if mode == "encrypt" else -1
        return matrix[r1][(c1 + shift) % 5] + matrix[r2][(c2 + shift) % 5]
    elif c1 == c2:  # Same column
        shift = 1 if mode == "encrypt" else -1
        return matrix[(r1 + shift) % 5][c1] + matrix[(r2 + shift) % 5][c2]
    else:  # Rectangle
        return matrix[r1][c2] + matrix[r2][c1]

def playfair_cipher(text, key, mode="encrypt"):
    matrix = generate_key_matrix(key)
    prepared_text = prepare_text(text)
    result = [process_pair(matrix, pair, mode) for pair in prepared_text]
    return "".join(result)

key = "keyword"
plaintext = "helloworld"
ciphertext = playfair_cipher(plaintext, key, mode="encrypt")
decrypted = playfair_cipher(ciphertext, key, mode="decrypt")
print("Plaintext:", plaintext)
print("Ciphertext:", ciphertext)
print("Decrypted:", decrypted)
=======================

import numpy as np

def mod_inverse(matrix, modulus):
    det=int(np.round(np.linalg.det(matrix)))
    det_inv=pow(det, -1, modulus)
    matrix_modulus_inv=det_inv * np.round(det * np.linalg.inv(matrix)).astype (int) % modulus
    return matrix_modulus_inv
    
def text_to_numeric_vector(text):
    return [ord(char) - ord('A') for char in text]
    
def numeric_vector_to_text(vector):
    return ''.join(chr(num % 26 + ord('A')) for num in vector)
    
def hill_encrypt(plaintext, key_matrix):
    n=len(key_matrix)
    if len(plaintext) % n!=0:
        plaintext += 'X' * (n - len(plaintext) % n)
        
    plaintext_vectors= [text_to_numeric_vector(plaintext[i:i+n]) for i in range(0, len(plaintext),n)]
    encrypted_text= ""
    
    for vector in plaintext_vectors:
        encrypted_vector= np.dot(key_matrix, vector) % 26
        encrypted_text+= numeric_vector_to_text(encrypted_vector)
    return encrypted_text
    
def hill_decrypt(ciphertext, key_matrix):
    n=len(key_matrix)
    inverse_key_matrix=mod_inverse(key_matrix, 26)
    
    ciphertext_vectors=[text_to_numeric_vector(ciphertext[i:i+n]) for i in range(0, len(ciphertext), n)]
    decrypted_text= ""
    
    for vector in ciphertext_vectors:
        decrypted_vector= np.dot(inverse_key_matrix, vector) % 26
        decrypted_text += numeric_vector_to_text(decrypted_vector)
        
    return decrypted_text
    
key_matrix = np.array([[6, 24, 1],
                        [13, 16, 10],
                        [20, 17, 15]])
                        
plaintext= "HELLO"
encrypted_text= hill_encrypt(plaintext, key_matrix)
decrypted_text= hill_decrypt(encrypted_text, key_matrix)

print("Plaintext:", plaintext)
print("Encrypted text:", encrypted_text)
print("Decrypted text:", decrypted_text)
    ========================
def generate_key(text, keyword):
    key=keyword
    if len(text) == len(keyword):
        return key
    else:
        for i in range(len(text)-len(keyword)):
            key +=keyword[i % len(keyword)]
    return key
    
def vigenere_encrypt(plaintext, keyword):
    key=generate_key(plaintext, keyword.upper())
    encrypted_text=""
    
    for i in range(len(plaintext)):
        if plaintext[i].isalpha():
            shift=ord(key[i])-ord('A')
            encrypted_char= chr((ord(plaintext[i].upper()) - ord('A') +shift) % 26 + ord('A'))
            encrypted_text+= encrypted_char
        else:
            encrypted_text+= plaintext[i]
    return encrypted_text
    
def vigenere_decrypt(ciphertext, keyword):
    key=generate_key(ciphertext, keyword).upper()
    decrypted_text=""
    
    for i in range(len(ciphertext)):
        if ciphertext[i].isalpha():
            shift=ord (key[i]) - ord('A')
            decrypted_char=chr((ord(ciphertext[i].upper()) - ord('A') -shift) % 26 + ord('A'))
            decrypted_text+= decrypted_char
        else:
            decrypted_text+= ciphertext[i]
    return decrypted_text
    
plaintext="HELLO WORLD"
keyword="KEY"

encrypted_text= vigenere_encrypt(plaintext, keyword)
decrypted_text=vigenere_decrypt(encrypted_text, keyword)

print("Plaintext:", plaintext)
print("Keyword:", keyword)
print("Encrypted text:", encrypted_text)
print("Decrypted text", decrypted_text)
=========
def power(a,b,p):
    if b==1:
        return a
    else:
        return pow(a,b,)%p
        
def main():
    P=23
    print("The value of P:", P)
    G=9
    print("The value of G:", G)
    a=4
    print("The private key a for Alice:", a)
    x=power(G,a,P)
    b=3
    print("The private key b for Bob:", b)
    y=power(G,b,P)
    ka=power(y,a,P)
    kb=power(x,b,P)
    print("Secret key for Alice is:", ka)
    print("Secret key for Bob is:", kb)
    
if __name__ == "__main__":
    main()
=============
import random
from math import gcd

def is_prime(num):
    if num <= 1:
        return false
    for i in range(2, int(num **0.5) +1):
        if num % i ==0:
            return False
    return True
    
def generate_prime_candidate(start=100, end=300):
    while True:
        num=random.randint(start,end)
        if is_prime(num):
            return num
            
def generate_keypair():
    p=generate_prime_candidate()
    q=generate_prime_candidate()
    
    while p==q:
        q=generate_prime_candidate()
        
    n=p*q
    phi=(p-1)*(q-1)
    
    e= random.randint(2, phi-1)
    while gcd(e, phi) !=1:
        e = random.randint(2, phi -1)
        
    d=pow(e, -1, phi)
    return((e,n), (d,n))
    
def encrypt(public_key, plaintext):
    e,n = public_key
    cipher= [(ord(char) ** e)% n for char in plaintext]
    return cipher
    
def decrypt(private_key, ciphertext):
    d,n= private_key
    plain= [chr((char ** d) % n) for char in ciphertext]
    return ''.join(plain)
    
public_key, private_key=generate_keypair()
print("Public key:", public_key)
print("Private key:", private_key)

message="HELLO RSA"
ciphertext= encrypt(public_key, message)
print("Encrypted message:", ciphertext)

decrypted_message=decrypt(private_key, ciphertext)
print("Decrypted message:", decrypted_message)
==============
import hashlib

def hash_md5(data):
    md5_hash=hashlib.md5()
    md5_hash.update(data.encode('utf-8'))
    return md5_hash.hexdigest()
    
if __name__ == "__main__":
    input_data="Hello, this is a test message!"
    md5_result= hash_md5(input_data)
    print(f"MD5: {md5_result}")
===================
import hashlib
data="WHO GOES THERE?"
sha1_hash=hashlib.sha1()
sha1_hash.update(data.encode())
hash_value=sha1_hash.hexdigest()
print(f"SHA-1 Hash: {hash_value}")